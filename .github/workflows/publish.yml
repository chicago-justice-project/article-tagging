name: Publish to PyPI

on:
  # Allow manual triggers from any branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment to deploy to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi
  
  # Automatically trigger on new releases
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'pypi' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.9"

    - name: Install build/package dependencies
      run: uv sync --locked --all-extras --dev
    
    - name: Download required data files
      run: |
        # Download NLTK data
        uv run python -c "import nltk; nltk.download('punkt_tab', '.venv/nltk_data'); nltk.download('wordnet', '.venv/nltk_data')"
        
        # Download geographic data
        curl "https://data.cityofchicago.org/api/geospatial/igwz-8jzy?method=export&format=GeoJSON" -o "lib/tagnews/data/Boundaries - Community Areas (current).geojson"
        
        # Download and extract GloVe
        curl -O https://downloads.cs.stanford.edu/nlp/data/glove.6B.zip
        unzip glove.6B.zip glove.6B.50d.txt -d lib/tagnews/data
        rm glove.6B.zip
        
        # Move test data
        mv lib/tagnews/data/ci-data/*.csv lib/tagnews/data/
    
    - name: Train and save models
      run: |
        uv run python -m tagnews.crimetype.models.binary_stemmed_logistic.save_model
        uv run python -m tagnews.geoloc.models.lstm.save_model 2

    - name: Build package
      run: uv build

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    if: ${{ github.event.inputs.environment == 'pypi' }}
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/tagnews

    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish to Test PyPI
    if: ${{ github.event.inputs.environment == 'testpypi' }}
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/tagnews

    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to TestPyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
